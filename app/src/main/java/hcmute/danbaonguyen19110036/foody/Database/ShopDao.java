package hcmute.danbaonguyen19110036.foody.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Shop".
*/
public class ShopDao extends AbstractDao<Shop, Long> {

    public static final String TABLENAME = "Shop";

    /**
     * Properties of entity Shop.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Shopname = new Property(1, String.class, "shopname", false, "SHOPNAME");
        public final static Property OpenDoor = new Property(2, String.class, "openDoor", false, "OPEN_DOOR");
        public final static Property Pricerange = new Property(3, String.class, "pricerange", false, "PRICERANGE");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Path = new Property(5, int.class, "path", false, "PATH");
    }

    private DaoSession daoSession;


    public ShopDao(DaoConfig config) {
        super(config);
    }
    
    public ShopDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Shop\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SHOPNAME\" TEXT," + // 1: shopname
                "\"OPEN_DOOR\" TEXT," + // 2: openDoor
                "\"PRICERANGE\" TEXT," + // 3: pricerange
                "\"ADDRESS\" TEXT," + // 4: address
                "\"PATH\" INTEGER NOT NULL );"); // 5: path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Shop\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Shop entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String shopname = entity.getShopname();
        if (shopname != null) {
            stmt.bindString(2, shopname);
        }
 
        String openDoor = entity.getOpenDoor();
        if (openDoor != null) {
            stmt.bindString(3, openDoor);
        }
 
        String pricerange = entity.getPricerange();
        if (pricerange != null) {
            stmt.bindString(4, pricerange);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
        stmt.bindLong(6, entity.getPath());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Shop entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String shopname = entity.getShopname();
        if (shopname != null) {
            stmt.bindString(2, shopname);
        }
 
        String openDoor = entity.getOpenDoor();
        if (openDoor != null) {
            stmt.bindString(3, openDoor);
        }
 
        String pricerange = entity.getPricerange();
        if (pricerange != null) {
            stmt.bindString(4, pricerange);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
        stmt.bindLong(6, entity.getPath());
    }

    @Override
    protected final void attachEntity(Shop entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Shop readEntity(Cursor cursor, int offset) {
        Shop entity = new Shop( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shopname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // openDoor
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pricerange
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.getInt(offset + 5) // path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Shop entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShopname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOpenDoor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPricerange(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPath(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Shop entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Shop entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Shop entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
