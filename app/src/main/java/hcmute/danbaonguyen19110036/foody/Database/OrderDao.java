package hcmute.danbaonguyen19110036.foody.Database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Order".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "Order";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderDate = new Property(1, java.util.Date.class, "OrderDate", false, "ORDER_DATE");
        public final static Property UserId = new Property(2, Long.class, "userId", false, "USER_ID");
    }

    private Query<Order> food_OrderItemQuery;
    private Query<Order> user_OrdersQuery;

    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Order\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_DATE\" INTEGER," + // 1: OrderDate
                "\"USER_ID\" INTEGER);"); // 2: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Order\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date OrderDate = entity.getOrderDate();
        if (OrderDate != null) {
            stmt.bindLong(2, OrderDate.getTime());
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date OrderDate = entity.getOrderDate();
        if (OrderDate != null) {
            stmt.bindLong(2, OrderDate.getTime());
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // OrderDate
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "orderItem" to-many relationship of Food. */
    public List<Order> _queryFood_OrderItem(Long foodId) {
        synchronized (this) {
            if (food_OrderItemQuery == null) {
                QueryBuilder<Order> queryBuilder = queryBuilder();
                queryBuilder.join(OrderItem.class, OrderItemDao.Properties.OrderId)
                    .where(OrderItemDao.Properties.FoodId.eq(foodId));
                food_OrderItemQuery = queryBuilder.build();
            }
        }
        Query<Order> query = food_OrderItemQuery.forCurrentThread();
        query.setParameter(0, foodId);
        return query.list();
    }

    /** Internal query to resolve the "orders" to-many relationship of User. */
    public List<Order> _queryUser_Orders(Long userId) {
        synchronized (this) {
            if (user_OrdersQuery == null) {
                QueryBuilder<Order> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_OrdersQuery = queryBuilder.build();
            }
        }
        Query<Order> query = user_OrdersQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
