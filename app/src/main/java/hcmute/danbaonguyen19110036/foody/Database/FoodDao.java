package hcmute.danbaonguyen19110036.foody.Database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Food".
*/
public class FoodDao extends AbstractDao<Food, Long> {

    public static final String TABLENAME = "Food";

    /**
     * Properties of entity Food.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Foodname = new Property(1, String.class, "foodname", false, "FOODNAME");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Price = new Property(3, int.class, "price", false, "PRICE");
        public final static Property Img = new Property(4, byte[].class, "img", false, "IMG");
        public final static Property CategoryId = new Property(5, Long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property ShopId = new Property(6, Long.class, "shopId", false, "SHOP_ID");
    }

    private DaoSession daoSession;

    private Query<Food> category_FoodsQuery;
    private Query<Food> shop_FoodsQuery;

    public FoodDao(DaoConfig config) {
        super(config);
    }
    
    public FoodDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Food\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FOODNAME\" TEXT," + // 1: foodname
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"PRICE\" INTEGER NOT NULL ," + // 3: price
                "\"IMG\" BLOB," + // 4: img
                "\"CATEGORY_ID\" INTEGER," + // 5: categoryId
                "\"SHOP_ID\" INTEGER);"); // 6: shopId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Food\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Food entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String foodname = entity.getFoodname();
        if (foodname != null) {
            stmt.bindString(2, foodname);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
        stmt.bindLong(4, entity.getPrice());
 
        byte[] img = entity.getImg();
        if (img != null) {
            stmt.bindBlob(5, img);
        }
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(6, categoryId);
        }
 
        Long shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindLong(7, shopId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Food entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String foodname = entity.getFoodname();
        if (foodname != null) {
            stmt.bindString(2, foodname);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
        stmt.bindLong(4, entity.getPrice());
 
        byte[] img = entity.getImg();
        if (img != null) {
            stmt.bindBlob(5, img);
        }
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(6, categoryId);
        }
 
        Long shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindLong(7, shopId);
        }
    }

    @Override
    protected final void attachEntity(Food entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Food readEntity(Cursor cursor, int offset) {
        Food entity = new Food( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // foodname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.getInt(offset + 3), // price
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4), // img
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // categoryId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // shopId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Food entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFoodname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrice(cursor.getInt(offset + 3));
        entity.setImg(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
        entity.setCategoryId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setShopId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Food entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Food entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Food entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "foods" to-many relationship of Category. */
    public List<Food> _queryCategory_Foods(Long categoryId) {
        synchronized (this) {
            if (category_FoodsQuery == null) {
                QueryBuilder<Food> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CategoryId.eq(null));
                category_FoodsQuery = queryBuilder.build();
            }
        }
        Query<Food> query = category_FoodsQuery.forCurrentThread();
        query.setParameter(0, categoryId);
        return query.list();
    }

    /** Internal query to resolve the "foods" to-many relationship of Shop. */
    public List<Food> _queryShop_Foods(Long shopId) {
        synchronized (this) {
            if (shop_FoodsQuery == null) {
                QueryBuilder<Food> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ShopId.eq(null));
                shop_FoodsQuery = queryBuilder.build();
            }
        }
        Query<Food> query = shop_FoodsQuery.forCurrentThread();
        query.setParameter(0, shopId);
        return query.list();
    }

}
